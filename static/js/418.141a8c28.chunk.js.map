{"version":3,"file":"static/js/418.141a8c28.chunk.js","mappings":"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","sources":["components/buttons/FilledButton.tsx","components/buttons/TextIconButton.tsx","components/buttons/TextButton.tsx","layouts/Navbar.tsx"],"sourcesContent":["import { Button } from \"@material-tailwind/react\";\r\n\r\nexport default function FilledButton({\r\n  className = \"\",\r\n  children,\r\n  ...others\r\n}: IPropsOfComponent) {\r\n  return (\r\n    <Button\r\n      variant=\"filled\"\r\n      className={`rounded-md normal-case text-sm font-normal shadow-none hover:shadow-none px-4 py-2 bg-[#00bcd433] ${className}`}\r\n      {...others}\r\n    >\r\n      {children}\r\n    </Button>\r\n  );\r\n}\r\n","import { IconButton } from '@material-tailwind/react'\r\n\r\nexport default function TextIconButton({ className = '', children, ...others }: IPropsOfComponent) {\r\n  return (\r\n    <IconButton\r\n      variant=\"text\"\r\n      className={`w-8 h-8 p-0 text-white hover:bg-gray-100 hover:bg-opacity-10 active:bg-gray-100 active:bg-opacity-10 ${className}`}\r\n      {...others}\r\n    >\r\n      {children}\r\n    </IconButton>\r\n  )\r\n}","import { Button } from \"@material-tailwind/react\";\r\n\r\n\r\nexport default function TextButton({ className = '', children, ...others }: IPropsOfComponent) {\r\n  return (\r\n    <Button\r\n      variant=\"text\"\r\n      className={`rounded-md normal-case text-sm font-normal text-gray-100 px-4 py-2 hover:bg-gray-100 hover:bg-opacity-10 active:bg-gray-100 active:bg-opacity-10 ${className}`}\r\n      {...others}\r\n    >\r\n      {children}\r\n    </Button>\r\n  )\r\n}","import { useState } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { useWeb3Modal } from \"@web3modal/react\";\r\nimport { useAccount, useDisconnect, useSwitchNetwork, useNetwork } from \"wagmi\";\r\nimport { Drawer, List, ListItem } from \"@material-tailwind/react\";\r\nimport Container from \"../components/containers/Container\";\r\nimport TextButton from \"../components/buttons/TextButton\";\r\nimport TextIconButton from \"../components/buttons/TextIconButton\";\r\nimport FilledButton from \"../components/buttons/FilledButton\";\r\n\r\nimport logoImg from \"../assets/images/king.png\";\r\n\r\n// -----------------------------------------------------------------------------------------\r\n\r\ninterface INavLink {\r\n  id: number;\r\n  label: string;\r\n  iconName: string;\r\n  to: string;\r\n}\r\n\r\n// -----------------------------------------------------------------------------------------\r\n\r\nconst NAV_LINKS: Array<INavLink> = [\r\n  {\r\n    id: 1,\r\n    label: \"Staking\",\r\n    iconName: \"lucide:cylinder\",\r\n    to: \"/staking\",\r\n  },\r\n  {\r\n    id: 2,\r\n    label: \"Twitter\",\r\n    iconName: \"line-md:twitter\",\r\n    to: \"/twitter\",\r\n  },\r\n  {\r\n    id: 3,\r\n    label: \"Telegram\",\r\n    iconName: \"la:telegram\",\r\n    to: \"/telegram\",\r\n  },\r\n];\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID;\r\n\r\n// -----------------------------------------------------------------------------------------\r\n\r\nexport default function Navbar() {\r\n  const { pathname } = useLocation();\r\n  const { open } = useWeb3Modal();\r\n  const { isConnected } = useAccount();\r\n  const { disconnect } = useDisconnect();\r\n  const { switchNetwork } = useSwitchNetwork();\r\n  const { chain } = useNetwork();\r\n  const navigate = useNavigate();\r\n\r\n  const [visibleDrawer, setVisibleDrawer] = useState<boolean>(false);\r\n\r\n  const closeDrawer = () => {\r\n    setVisibleDrawer(false);\r\n  };\r\n\r\n  const navigateToPage = (to: string) => {\r\n    navigate(to);\r\n    closeDrawer();\r\n  };\r\n\r\n  return (\r\n    <nav className=\"sticky top-0 bg-[#070a15] border-b border-gray-900 z-[99]\">\r\n      <Container className=\"justify-between p-3 hidden lg:flex\">\r\n        <div className=\"flex items-center gap-8\">\r\n          <Link to=\"/\">\r\n            <img src={logoImg} alt=\"logo\" className=\"h-[60px]\" />\r\n          </Link>\r\n\r\n          <div className=\"flex items-center gap-4\">\r\n            {NAV_LINKS.map((linkItem) => (\r\n              <Link key={linkItem.id} to={linkItem.to}>\r\n                <TextButton\r\n                  className={`flex items-center gap-2 ${\r\n                    pathname === linkItem.to ? \"text-gray-100\" : \"text-gray-500\"\r\n                  }`}\r\n                >\r\n                  <Icon icon={linkItem.iconName} className=\"text-lg\" />\r\n                  {linkItem.label}\r\n                </TextButton>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-8\">\r\n          {isConnected ? (\r\n            chain?.id === Number(chainId) ? (\r\n              <FilledButton\r\n                className=\"flex items-center gap-1\"\r\n                onClick={() => disconnect()}\r\n              >\r\n                <Icon icon=\"mdi:wallet-outline\" className=\"text-xl\" />\r\n                Disconnect\r\n              </FilledButton>\r\n            ) : (\r\n              <FilledButton\r\n                className=\"flex items-center gap-1\"\r\n                onClick={() => switchNetwork?.(Number(chainId))}\r\n              >\r\n                <Icon icon=\"mdi:wallet-outline\" className=\"text-xl\" />\r\n                Switch network\r\n              </FilledButton>\r\n            )\r\n          ) : (\r\n            <FilledButton\r\n              className=\"flex items-center gap-1 bg-blue-500\"\r\n              onClick={() => open()}\r\n            >\r\n              <Icon icon=\"mdi:wallet-outline\" className=\"text-xl\" />\r\n              Connect Wallet\r\n            </FilledButton>\r\n          )}\r\n        </div>\r\n      </Container>\r\n\r\n      <Container className=\"justify-between items-center p-4 flex lg:hidden\">\r\n        <Link to=\"/\">\r\n          <img src={logoImg} alt=\"logo\" className=\"h-[60px]\" />\r\n        </Link>\r\n\r\n        <TextIconButton onClick={() => setVisibleDrawer(true)}>\r\n          <Icon icon=\"ion:menu\" className=\"text-xl\" />\r\n        </TextIconButton>\r\n      </Container>\r\n      <Drawer\r\n        open={visibleDrawer}\r\n        onClose={closeDrawer}\r\n        className=\"p-4 bg-[#070a15]\"\r\n      >\r\n        <div className=\"flex flex-col gap-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <Link to=\"/\">\r\n              <img src={logoImg} alt=\"logo\" className=\"h-[60px]\" />\r\n            </Link>\r\n\r\n            <TextIconButton onClick={closeDrawer}>\r\n              <Icon icon=\"akar-icons:cross\" className=\"text-xl\" />\r\n            </TextIconButton>\r\n          </div>\r\n\r\n          <List>\r\n            {NAV_LINKS.map((linkItem) => (\r\n              <ListItem\r\n                key={linkItem.id}\r\n                onClick={() => navigateToPage(linkItem.to)}\r\n                className={`gap-4 ${\r\n                  pathname === linkItem.to ? \"text-gray-100\" : \"text-gray-500\"\r\n                }`}\r\n              >\r\n                <Icon icon={linkItem.iconName} className=\"text-lg\" />\r\n                {linkItem.label}\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n\r\n          <List>\r\n            {isConnected ? (\r\n              chain?.id === Number(chainId) ? (\r\n                <ListItem\r\n                  className=\"gap-4 text-gray-100\"\r\n                  onClick={() => disconnect()}\r\n                >\r\n                  <Icon icon=\"mdi:wallet-outline\" className=\"text-xl\" />\r\n                  Disconnect\r\n                </ListItem>\r\n              ) : (\r\n                <ListItem\r\n                  className=\"gap-4 text-gray-100\"\r\n                  onClick={() => switchNetwork?.(Number(chainId))}\r\n                >\r\n                  <Icon icon=\"mdi:wallet-outline\" className=\"text-xl\" />\r\n                  Switch network\r\n                </ListItem>\r\n              )\r\n            ) : (\r\n              <ListItem className=\"gap-4 text-gray-100\" onClick={() => open()}>\r\n                <Icon icon=\"mdi:wallet-outline\" className=\"text-xl\" />\r\n                Connect Wallet\r\n              </ListItem>\r\n            )}\r\n          </List>\r\n        </div>\r\n      </Drawer>\r\n    </nav>\r\n  );\r\n}\r\n"],"names":["FilledButton","_ref","className","children","others","_jsx","Button","variant","concat","TextIconButton","IconButton","TextButton","NAV_LINKS","id","label","iconName","to","chainId","process","Navbar","pathname","useLocation","open","useWeb3Modal","isConnected","useAccount","disconnect","useDisconnect","switchNetwork","useSwitchNetwork","chain","useNetwork","navigate","useNavigate","visibleDrawer","setVisibleDrawer","useState","closeDrawer","_jsxs","Container","Link","src","logoImg","alt","map","linkItem","Icon","icon","Number","onClick","Drawer","onClose","List","ListItem","navigateToPage"],"sourceRoot":""}